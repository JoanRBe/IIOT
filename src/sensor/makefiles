CC = arm-linux-gnueabihf-g++
LIBS = -lwiringPi -lm -lssl -lcrypto -lsqlite3 -lstdc++ -lpaho-mqttpp3 -lpaho-mqtt3c -lpthread
LIBRARY = libhttp.so
MQTTLIB = libpaho-mqttpp3.so
SQLIB = libsql.so
CFLAGS = -Wall -fPIC
HTTPS_FLAGS = -DVULL_HTTPS -lssl -lcrypto
LDFLAGS = -shared
LDFLAGSQL = -L. -lsqlite3 -lstdc++
CFLAGSQL = -Wall -I/usr/include
CXXFLAGS = -std=c++17 -Wall -I/usr/local/include/mqtt/
MQTTLIBDIR = src/CMakeFiles/paho-mqttpp3-shared.dir
OBJ = mqtt.o# Definimos los archivos objeto

LIBDIR = .

# El objetivo principal
sensors: sensors.o $(LIBRARY) $(SQLIB)
	$(CC) $(HTTPS_FLAGS) -o sensors sensors.o $(LIBS) -L. -lhttp -L. -lsql

# Compilación de sensors.o
sensors.o: sensors.cpp
	$(CC) $(HTTPS_FLAGS) -c sensors.cpp -o sensors.o

# Compilación de la biblioteca de http
$(LIBRARY): http.o
	$(CC) -shared -fPIC -o libhttp.so http.o -lssl -lcrypto

# Compilación de http.o
http.o: http.cpp
	$(CC) -fPIC -c -o http.o http.cpp

# Compilación de la biblioteca de SQL
$(SQLIB): sql.o

	$(CC) $(LDFLAGSQL) -shared -fPIC -o libsql.so sql.o

# Compilación de sql.o
sql.o: sql.cpp

	$(CC) -fPIC -c -o sql.o sql.cpp

# Regla principal
mqtt: $(OBJ)
	$(CC) $(OBJ) -o mqtt $(LIBS)

# Regla para compilar mqtt.o
mqtt.o: mqtt.cpp
	$(CC) $(CXXFLAGS) -c mqtt.cpp -o mqtt.o

# Comando de limpieza
clean:
	rm -f *.o sensors lm35 aht20 led voc-co2 report.txt sql http

# Ejecutar la aplicación con un intervalo de 2 segundos
test:

	export LD_LIBRARY_PATH=.:$$LD_LIBRARY_PATH
	./sensors 2